const mongoose = require('mongoose');
const WebSocket = require('ws');
mongoose.connect('mongodb://localhost:27017/mountain_goat_farm', { useNewUrlParser: true, useUnifiedTopology: true });

const auditLogSchema = new mongoose.Schema({
  timestamp: String,
  user: String,
  action: String,
  details: String
});
const AuditLog = mongoose.model('AuditLog', auditLogSchema);

const wss = new WebSocket.Server({ server });

function broadcastAuditLog(log) {
  wss.clients.forEach(client => {
    if (client.readyState === WebSocket.OPEN) {
      client.send(JSON.stringify(log));
    }
  });
}

// Get audit log data
app.get('/api/audit-logs', async (req, res) => {
  try {
    const logs = await AuditLog.find().sort({ timestamp: -1 }).exec();
    res.json(logs);
  } catch (err) {
    res.status(500).json({ error: 'Failed to fetch audit logs.' });
  }
});

// Add new audit log entry
app.post('/api/audit-logs', async (req, res) => {
  const { timestamp, user, action, details } = req.body;
  if (!timestamp || !user || !action || !details) {
    return res.status(400).json({ error: 'Missing required fields.' });
  }
  try {
    await AuditLog.create({ timestamp, user, action, details });
    broadcastAuditLog({ timestamp, user, action, details });
    res.json({ success: true });
  } catch (err) {
    res.status(500).json({ error: 'Failed to save audit log.' });
  }
});

const ws = new WebSocket('ws://localhost:3001');
ws.onmessage = (event) => {
  // Optionally, re-fetch logs or directly add new log to dashboard
  refreshDashboard();
};

// feat: migrate audit log to MongoDB and enable real-time dashboard updates via WebSocket
